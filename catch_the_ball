import pygame
from pygame.draw import *
from random import randint, choice, random
import math
pygame.init()
pygame.font.init()

FPS = 60
WIDTH = 1200
HEIGHT = 750
screen = pygame.display.set_mode((WIDTH, HEIGHT))

WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
GREEN = (0, 255, 0)
MAGENTA = (255, 0, 255)
CYAN = (0, 255, 255)
BLACK = (0, 0, 0)
COLORS = [RED, BLUE, YELLOW, GREEN, MAGENTA, CYAN, WHITE]

class Target:
    def __init__(self, vel):
        self.new_target(vel)

    def new_target(self, vel):
        self.color = choice(COLORS)
        self.r = randint(10, 30)
        self.x = randint(self.r, WIDTH-self.r)
        self.y = randint(self.r, HEIGHT-self.r)
        self.vel = vel
        self.dir = random() * 2 * math.pi
        self.vel_x = self.vel * math.cos(self.dir)
        self.vel_y = self.vel * math.sin(self.dir)


class Ball(Target):
    def check_hit(self, event):
        if math.dist(event.pos, (self.x, self.y)) <= self.r:
            score.increase(1)
            self.new_target(100)

    def move(self):
        if self.x > WIDTH-self.r:
            self.dir = (random() + 0.5) * math.pi
        elif self.x < self.r:
            self.dir = (random() - 0.5) * math.pi
        if self.y > HEIGHT-self.r:
            self.dir = (random() + 1) * math.pi
        elif self.y < self.r:
            self.dir = random() * math.pi
        self.vel_x = self.vel * math.cos(self.dir)
        self.vel_y = self.vel * math.sin(self.dir)
        self.x += self.vel_x / FPS
        self.y += self.vel_y / FPS

    def draw(self):
        circle(screen, self.color, (int(self.x), int(self.y)), self.r)


class Square(Target):
    def check_hit(self, event):
        if abs(event.pos[0] - self.x) <= self.r and abs(event.pos[1] - self.y) <= self.r:
            score.increase(10)
            self.new_target(300)

    def move(self):
        if self.x > WIDTH-self.r:
            self.dir = (random() + 0.5) * math.pi
        elif self.x < self.r:
            self.dir = (random() - 0.5) * math.pi
        if self.y > HEIGHT-self.r:
            self.dir = (random() + 1) * math.pi
        elif self.y < self.r:
            self.dir = random() * math.pi
        if abs(pygame.mouse.get_pos()[0] - self.x) <= self.r and abs(pygame.mouse.get_pos()[1] - self.y) <= self.r:
            self.dir = math.atan2(self.y - pygame.mouse.get_pos()[1], self.x - pygame.mouse.get_pos()[0])
        self.vel_x = self.vel * math.cos(self.dir)
        self.vel_y = self.vel * math.sin(self.dir)
        self.x += self.vel_x / FPS
        self.y += self.vel_y / FPS
    
    def draw(self):
        rect(screen, self.color, [self.x - self.r, self.y - self.r, 2*self.r, 2*self.r])


class Counter:
    def __init__(self):
        self.count = 0

    def increase(self, prize):
        self.count += prize

    def draw(self):
        surface_counter = labelFont.render(str(self.count), False, WHITE)
        screen.blit(surface_counter, (0, 0))

balls = [Ball(100) for i in range(10)]
square = Square(300)
score = Counter()
labelFont = pygame.font.SysFont('Monaco', 100)
pygame.display.update()
clock = pygame.time.Clock()
finished = False

while not finished:
    clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True
        elif event.type == pygame.MOUSEBUTTONDOWN:
            for ball in balls:
                ball.check_hit(event)
            square.check_hit(event)
    for ball in balls:
        ball.move()
        ball.draw()
    #square.move(pygame.mouse.get_pos())
    square.move()
    square.draw()
    score.draw()
    pygame.display.update()
    screen.fill(BLACK)

pygame.quit()
